@page "/"
@inject IJSRuntime JS

<!-- Correct static file reference (remove ~ which isn't resolved in .razor link tags) -->
<link href="css/fullscreen-map.css" rel="stylesheet" />

<!-- Fallback inline critical styles to ensure map always has size even if external CSS fails to load -->
<style>
    #map { position: fixed; inset: 0; width:100vw; height:100vh; z-index:1; background:#dcdcdc; }
</style>

<!-- Fullscreen map -->
<div id="map"></div>

<!-- Overlay UI -->
<div class="overlay-top-left">
    <h3>River Head Forest Tracker</h3>
    <div class="overlay-legend" style="margin-top:6px;">
        <div class="legend-title">Wind Speed Colors:</div>
        <div class="legend-items">
            <div class="legend-item"><span style="color: #4dabf7;">●</span> 0-2 m/s</div>
            <div class="legend-item"><span style="color: #1c7ed6;">●</span> 2-4 m/s</div>
            <div class="legend-item"><span style="color: #ffd43b;">●</span> 4-8 m/s</div>
            <div class="legend-item"><span style="color: #ff922b;">●</span> 8-10 m/s</div>
            <div class="legend-item"><span style="color: #e03131;">●</span> 10+ m/s</div>
        </div>
    </div>
    <div style="margin-top:8px;font-size:0.7rem;color:#555;max-width:240px;">
        Live rover path rendered as one continuous line. Old points are retained (no trimming).
    </div>
</div>

@if (!string.IsNullOrEmpty(_error))
{
    <div class="overlay-error">Error: @_error</div>
}
@if (!string.IsNullOrEmpty(_debugInfo))
{
    <div class="overlay-debug">@_debugInfo</div>
}

@code {
    private string? _error;
    private string? _debugInfo;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await InitializeMapWithRetryAsync();
    }

    private async Task InitializeMapWithRetryAsync()
    {
        const int maxRetries = 5;
        for (int attempt = 1; attempt <= maxRetries; attempt++)
        {
            try
            {
                _debugInfo = $"Initializing map... ({attempt}/{maxRetries})";
                StateHasChanged();
                await Task.Delay(300 * attempt);

                var leafletAvailable = await JS.InvokeAsync<bool>("eval", "typeof L !== 'undefined'");
                if (!leafletAvailable)
                {
                    if (attempt == maxRetries) _error = "Leaflet library failed to load";
                    continue;
                }

                var fnAvailable = await JS.InvokeAsync<bool>("eval", "typeof window.initLeafletMap === 'function'");
                if (!fnAvailable)
                {
                    if (attempt == maxRetries)
                    {
                        _error = "Map initialization function not found";
                        await TryLoadScriptManuallyAsync();
                    }
                    continue;
                }

                await JS.InvokeVoidAsync("initLeafletMap");
                _debugInfo = null; _error = null; StateHasChanged();
                return;
            }
            catch (Exception ex)
            {
                if (attempt == maxRetries) _error = ex.Message;
            }
        }
        StateHasChanged();
    }

    private async Task TryLoadScriptManuallyAsync()
    {
        var load = @"return new Promise((resolve,reject)=>{if (typeof window.initLeafletMap==='function'){resolve(true);return;}const s=document.createElement('script');s.src='js/leafletInit.js';s.onload=()=>setTimeout(()=>typeof window.initLeafletMap==='function'?resolve(true):reject(),120);s.onerror=()=>reject();document.head.appendChild(s);});";
        if (await JS.InvokeAsync<bool>("eval", load))
        {
            await JS.InvokeVoidAsync("initLeafletMap");
            _error = null; _debugInfo = null;
        }
    }
}
